<?xml version="1.0" encoding="UTF-8"?>
<menuDocument>
    <menu>

        <addScriptItem id="h.pane.parms.hammer_select">
            <label>Select...</label>
            <parent>root_menu</parent>
            <insertBefore />
            <context>
                <expression>
                    from hammer_tools.settings import SettingsManager

                    if not SettingsManager.instance().value('hammer.select_parm_value.select.enable'):
                        return 0

                    parm = kwargs['parms'][0]
                    template = parm.parmTemplate()
                    try:
                        items = parm.menuItems()
                    except hou.OperationFailed:
                        return 0
                    if template.type() in (hou.parmTemplateType.Int,
                                           hou.parmTemplateType.String,
                                           hou.parmTemplateType.Menu) and \
                       len(items) > 3:
                        return 1
                    return 0
                </expression>
            </context>
            <scriptCode>
from hammer_tools.quick_selection import selectAny

parm = kwargs['parms'][0]
selectAny(parm)
            </scriptCode>
        </addScriptItem>

        <addScriptItem id="h.pane.parms.hammer_select_font">
            <label>Select Font...</label>
            <parent>root_menu</parent>
            <insertBefore />
            <context>
                <networkCategory>Sop,Cop2</networkCategory>
                <expression>
                    from hammer_tools.settings import SettingsManager

                    if not SettingsManager.instance().value('hammer.select_parm_value.select_font.enable'):
                        return 0

                    parm = kwargs['parms'][0]
                    if parm.name().lower() == 'font' or \
                       parm.description().lower() == 'font':
                        return 1
                    return 0
                </expression>
            </context>
            <scriptCode>
from hammer_tools.quick_selection import selectFont

parm = kwargs['parms'][0]
selectFont(parm)
            </scriptCode>
        </addScriptItem>

        <addScriptItem id="h.pane.parms.hammer_open_location">
            <label>Open Location...</label>
            <parent>root_menu</parent>
            <insertBefore />
            <context>
                <expression>
                    from hammer_tools.settings import SettingsManager

                    settings = SettingsManager.instance()
                    if not settings.value('hammer.open_location.enable'):
                        return 0

                    parm = kwargs['parms'][0]
                    template = parm.parmTemplate()
                    if template.type() == hou.parmTemplateType.String and \
                       template.stringType() == hou.stringParmType.FileReference and \
                       parm.name().lower() != 'font' and parm.description().lower() != 'font':
                        return 1
                    return 0
                </expression>
            </context>
            <scriptCode>
from hammer_tools.parmutils import openLocationFromParm

parm = kwargs['parms'][0]
openLocationFromParm(parm)
            </scriptCode>
        </addScriptItem>

        <addScriptItem id="h.pane.parms.hammer_choose_file_or_folder">
            <labelExpression>
                temp = 'Choose {} with Native Dialog...'
                parm = kwargs['parms'][0]
                template = parm.parmTemplate()
                if template.dataType() == hou.parmData.String and \
                   template.fileType() == hou.fileType.Directory:
                    return temp.format('Folder')
                else:
                    return temp.format('File')
            </labelExpression>
            <parent>root_menu</parent>
            <insertBefore>h.pane.parms.hammer_open_location</insertBefore>
            <context>
                <expression>
                    parm = kwargs['parms'][0]
                    template = parm.parmTemplate()
                    if template.type() == hou.parmTemplateType.String and \
                       template.stringType() == hou.stringParmType.FileReference and \
                       parm.name().lower() != 'font' and parm.description().lower() != 'font':
                        return 1
                    return 0
                </expression>
            </context>
            <scriptCode>
import hammer_tools.parmutils as pu
reload(pu)

parm = kwargs['parms'][0]
pu.chooseFileAndSetParm(parm)
            </scriptCode>
        </addScriptItem>

        <subMenu id="h.pane.parms.hammer_set_ramp_interpolation">

            <label>Set Interpolation</label>
            <parent>root_menu</parent>
            <insertBefore />
            <context>
                <expression>
                    from hammer_tools.settings import SettingsManager

                    if not SettingsManager.instance().value('hammer.set_interpolation.enable'):
                        return 0

                    parm = kwargs['parms'][0]
                    template = parm.parmTemplate()
                    if template.type() == hou.parmTemplateType.Ramp and \
                       parm.node().parent().isEditable():
                        return 1
                    return 0
                </expression>
            </context>

            <scriptItem id="h.pane.parms.hammer_set_ramp_interpolation_constant">
                <label>Constant</label>
                <scriptCode>
from hammer_tools.parmutils import setRampParmInterpolation

parm = kwargs['parms'][0]
setRampParmInterpolation(parm, hou.rampBasis.Constant)
                </scriptCode>
            </scriptItem>

            <scriptItem id="h.pane.parms.hammer_set_ramp_interpolation_linear">
                <label>Linear</label>
                <scriptCode>
from hammer_tools.parmutils import setRampParmInterpolation

parm = kwargs['parms'][0]
setRampParmInterpolation(parm, hou.rampBasis.Linear)
                </scriptCode>
            </scriptItem>

            <scriptItem id="h.pane.parms.hammer_set_ramp_interpolation_catmullrom">
                <label>Catmull-Rom</label>
                <scriptCode>
from hammer_tools.parmutils import setRampParmInterpolation

parm = kwargs['parms'][0]
setRampParmInterpolation(parm, hou.rampBasis.CatmullRom)
                </scriptCode>
            </scriptItem>

            <scriptItem id="h.pane.parms.hammer_set_ramp_interpolation_monotonecubic">
                <label>Monotone Cubic</label>
                <scriptCode>
from hammer_tools.parmutils import setRampParmInterpolation

parm = kwargs['parms'][0]
setRampParmInterpolation(parm, hou.rampBasis.MonotoneCubic)
                </scriptCode>
            </scriptItem>

            <scriptItem id="h.pane.parms.hammer_set_ramp_interpolation_bezier">
                <label>Bezier</label>
                <scriptCode>
from hammer_tools.parmutils import setRampParmInterpolation

parm = kwargs['parms'][0]
setRampParmInterpolation(parm, hou.rampBasis.Bezier)
                </scriptCode>
            </scriptItem>

            <scriptItem id="h.pane.parms.hammer_set_ramp_interpolation_bspline">
                <label>B-Spline</label>
                <scriptCode>
from hammer_tools.parmutils import setRampParmInterpolation

parm = kwargs['parms'][0]
setRampParmInterpolation(parm, hou.rampBasis.BSpline)
                </scriptCode>
            </scriptItem>

            <scriptItem id="h.pane.parms.hammer_set_ramp_interpolation_hermite">
                <label>Hermite</label>
                <scriptCode>
from hammer_tools.parmutils import setRampParmInterpolation

parm = kwargs['parms'][0]
setRampParmInterpolation(parm, hou.rampBasis.Hermite)
                </scriptCode>
            </scriptItem>

        </subMenu>

        <addScriptItem id="h.pane.parms.hammer_toggle_expression">
            <labelExpression>
                from hammer_tools.parmutils import isExpressionDisabled

                parm = kwargs['parms'][0]
                try:
                    parm.expression()
                    has_expression = True
                except hou.OperationFailed:
                    has_expression = False
                if has_expression:
                    return 'Disable Expression'
                if isExpressionDisabled(parm):
                    return 'Enable Expression'
                return ''
            </labelExpression>
            <parent>expression_menu</parent>
            <insertAfter>toggle_expr</insertAfter>
            <context>
                <expression>
                    from hammer_tools.parmutils import isExpressionDisabled

                    parm = kwargs['parms'][0]
                    try:
                        parm.expression()
                        has_expression = True
                    except hou.OperationFailed:
                        has_expression = False
                    if has_expression:
                        return True
                    if isExpressionDisabled(parm):
                        return True
                    return False
                </expression>
            </context>
            <scriptCode>
from hammer_tools.parmutils import toggleExpression

parm = kwargs['parms'][0]
toggleExpression(parm)
            </scriptCode>
        </addScriptItem>

    </menu>
</menuDocument>
